/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as homeIndexImport } from './routes/(home)/index'
import { Route as restaurantsRestaurantsImport } from './routes/(restaurants)/restaurants'
import { Route as addrestaurantCreateImport } from './routes/(add restaurant)/create'
import { Route as authenticationregisterRegisterImport } from './routes/(authentication)/(register)/register'
import { Route as authenticationloginPublicLoginImport } from './routes/(authentication)/(login)/_public.login'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const homeIndexRoute = homeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const restaurantsRestaurantsRoute = restaurantsRestaurantsImport.update({
  id: '/(restaurants)/restaurants',
  path: '/restaurants',
  getParentRoute: () => rootRoute,
} as any)

const addrestaurantCreateRoute = addrestaurantCreateImport.update({
  id: '/(add restaurant)/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const authenticationregisterRegisterRoute =
  authenticationregisterRegisterImport.update({
    id: '/(authentication)/(register)/register',
    path: '/register',
    getParentRoute: () => rootRoute,
  } as any)

const authenticationloginPublicLoginRoute =
  authenticationloginPublicLoginImport.update({
    id: '/(authentication)/(login)/_public/login',
    path: '/login',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/(add restaurant)/create': {
      id: '/(add restaurant)/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof addrestaurantCreateImport
      parentRoute: typeof rootRoute
    }
    '/(restaurants)/restaurants': {
      id: '/(restaurants)/restaurants'
      path: '/restaurants'
      fullPath: '/restaurants'
      preLoaderRoute: typeof restaurantsRestaurantsImport
      parentRoute: typeof rootRoute
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexImport
      parentRoute: typeof rootRoute
    }
    '/(authentication)/(register)/register': {
      id: '/(authentication)/(register)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authenticationregisterRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(authentication)/(login)/_public/login': {
      id: '/(authentication)/(login)/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authenticationloginPublicLoginImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '': typeof PublicRoute
  '/create': typeof addrestaurantCreateRoute
  '/restaurants': typeof restaurantsRestaurantsRoute
  '/': typeof homeIndexRoute
  '/register': typeof authenticationregisterRegisterRoute
  '/login': typeof authenticationloginPublicLoginRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRoute
  '/create': typeof addrestaurantCreateRoute
  '/restaurants': typeof restaurantsRestaurantsRoute
  '/': typeof homeIndexRoute
  '/register': typeof authenticationregisterRegisterRoute
  '/login': typeof authenticationloginPublicLoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_public': typeof PublicRoute
  '/(add restaurant)/create': typeof addrestaurantCreateRoute
  '/(restaurants)/restaurants': typeof restaurantsRestaurantsRoute
  '/(home)/': typeof homeIndexRoute
  '/(authentication)/(register)/register': typeof authenticationregisterRegisterRoute
  '/(authentication)/(login)/_public/login': typeof authenticationloginPublicLoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/create' | '/restaurants' | '/' | '/register' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/create' | '/restaurants' | '/' | '/register' | '/login'
  id:
    | '__root__'
    | '/_public'
    | '/(add restaurant)/create'
    | '/(restaurants)/restaurants'
    | '/(home)/'
    | '/(authentication)/(register)/register'
    | '/(authentication)/(login)/_public/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicRoute: typeof PublicRoute
  addrestaurantCreateRoute: typeof addrestaurantCreateRoute
  restaurantsRestaurantsRoute: typeof restaurantsRestaurantsRoute
  homeIndexRoute: typeof homeIndexRoute
  authenticationregisterRegisterRoute: typeof authenticationregisterRegisterRoute
  authenticationloginPublicLoginRoute: typeof authenticationloginPublicLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRoute,
  addrestaurantCreateRoute: addrestaurantCreateRoute,
  restaurantsRestaurantsRoute: restaurantsRestaurantsRoute,
  homeIndexRoute: homeIndexRoute,
  authenticationregisterRegisterRoute: authenticationregisterRegisterRoute,
  authenticationloginPublicLoginRoute: authenticationloginPublicLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_public",
        "/(add restaurant)/create",
        "/(restaurants)/restaurants",
        "/(home)/",
        "/(authentication)/(register)/register",
        "/(authentication)/(login)/_public/login"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx"
    },
    "/(add restaurant)/create": {
      "filePath": "(add restaurant)/create.tsx"
    },
    "/(restaurants)/restaurants": {
      "filePath": "(restaurants)/restaurants.tsx"
    },
    "/(home)/": {
      "filePath": "(home)/index.tsx"
    },
    "/(authentication)/(register)/register": {
      "filePath": "(authentication)/(register)/register.tsx"
    },
    "/(authentication)/(login)/_public/login": {
      "filePath": "(authentication)/(login)/_public.login.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
