/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as homeIndexImport } from './routes/(home)/index'
import { Route as restaurantsRestaurantsImport } from './routes/(restaurants)/restaurants'
import { Route as addrestaurantCreateImport } from './routes/(add restaurant)/create'

// Create/Update Routes

const homeIndexRoute = homeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const restaurantsRestaurantsRoute = restaurantsRestaurantsImport.update({
  id: '/(restaurants)/restaurants',
  path: '/restaurants',
  getParentRoute: () => rootRoute,
} as any)

const addrestaurantCreateRoute = addrestaurantCreateImport.update({
  id: '/(add restaurant)/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(add restaurant)/create': {
      id: '/(add restaurant)/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof addrestaurantCreateImport
      parentRoute: typeof rootRoute
    }
    '/(restaurants)/restaurants': {
      id: '/(restaurants)/restaurants'
      path: '/restaurants'
      fullPath: '/restaurants'
      preLoaderRoute: typeof restaurantsRestaurantsImport
      parentRoute: typeof rootRoute
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/create': typeof addrestaurantCreateRoute
  '/restaurants': typeof restaurantsRestaurantsRoute
  '/': typeof homeIndexRoute
}

export interface FileRoutesByTo {
  '/create': typeof addrestaurantCreateRoute
  '/restaurants': typeof restaurantsRestaurantsRoute
  '/': typeof homeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(add restaurant)/create': typeof addrestaurantCreateRoute
  '/(restaurants)/restaurants': typeof restaurantsRestaurantsRoute
  '/(home)/': typeof homeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/create' | '/restaurants' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/create' | '/restaurants' | '/'
  id:
    | '__root__'
    | '/(add restaurant)/create'
    | '/(restaurants)/restaurants'
    | '/(home)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  addrestaurantCreateRoute: typeof addrestaurantCreateRoute
  restaurantsRestaurantsRoute: typeof restaurantsRestaurantsRoute
  homeIndexRoute: typeof homeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  addrestaurantCreateRoute: addrestaurantCreateRoute,
  restaurantsRestaurantsRoute: restaurantsRestaurantsRoute,
  homeIndexRoute: homeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(add restaurant)/create",
        "/(restaurants)/restaurants",
        "/(home)/"
      ]
    },
    "/(add restaurant)/create": {
      "filePath": "(add restaurant)/create.tsx"
    },
    "/(restaurants)/restaurants": {
      "filePath": "(restaurants)/restaurants.tsx"
    },
    "/(home)/": {
      "filePath": "(home)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
